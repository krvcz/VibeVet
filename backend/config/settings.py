"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 4.2.20.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
from dotenv import load_dotenv
import logging
from rest_framework import status
import sys

# Load environment variables from .env file
load_dotenv()

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv('DEBUG', 'False') == 'True'

ALLOWED_HOSTS = os.getenv('ALLOWED_HOSTS', '').split(',') if not DEBUG else ['*']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'corsheaders',
    'django_filters',
    'common',
    'drugs',
    'interactions',
    'treatments',
    'users',
]

# Custom user model
AUTH_USER_MODEL = 'users.CustomUser'

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "csp.middleware.CSPMiddleware",

    "common.middleware.PostgreSQLUserMiddleware",
]

ROOT_URLCONF = "config.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "config.wsgi.application"


# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql',
        'NAME': os.getenv('DATABASE_NAME'),
        'USER': os.getenv('DATABASE_USER'),
        'PASSWORD': os.getenv('DATABASE_PASSWORD'),
        'HOST': os.getenv('DATABASE_HOST'),
        'PORT': os.getenv('DATABASE_PORT'),
        'CONN_MAX_AGE': 60  # Keep connections alive for 60 seconds
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = "static/"

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Logging Configuration
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '{levelname} {asctime} {module} {process:d} {thread:d} {message}',
            'style': '{',
        },
        'simple': {
            'format': '{levelname} {message}',
            'style': '{',
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'verbose',
        },
        'file': {
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': 'logs/django.log',
            'maxBytes': 1024 * 1024 * 5,  # 5 MB
            'backupCount': 5,
            'formatter': 'verbose',
        },
    },
    'loggers': {
        '': {  # Root logger
            'handlers': ['console', 'file'],
            'level': 'INFO',
        },
        'common': {  # Common app logger
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'drugs': {  # Drugs app logger
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'interactions': {  # Interactions app logger
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'treatments': {  # Treatments app logger
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
        'users': {  # Users app logger
            'handlers': ['console', 'file'],
            'level': 'INFO',
            'propagate': False,
        },
    },
}

# Django REST Framework settings
REST_FRAMEWORK = {
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 20,
    'EXCEPTION_HANDLER': 'common.utils.custom_exception_handler',
    'DEFAULT_AUTHENTICATION_CLASSES': [
        'rest_framework.authentication.SessionAuthentication',
    ],
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ],
    # Dodane ustawienia dla CoreAPI
    'DEFAULT_SCHEMA_CLASS': 'rest_framework.schemas.coreapi.AutoSchema',
    'DEFAULT_METADATA_CLASS': 'rest_framework.metadata.SimpleMetadata',
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

# Documentation settings
SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Session': {
            'type': 'apiKey',
            'name': 'Session',
            'in': 'header'
        }
    },
    'USE_SESSION_AUTH': True,
    'SECURITY_REQUIREMENTS': [
        {'Session': []}
    ],
    'LOGIN_URL': 'rest_framework:login',
    'LOGOUT_URL': 'rest_framework:logout',
    'VALIDATOR_URL': None,
    'DOC_EXPANSION': 'list',
    'OPERATIONS_SORTER': None,
    'TAGS_SORTER': None,
    'JSON_EDITOR': False,
    'SHOW_REQUEST_HEADERS': True,
    'SUPPORTED_SUBMIT_METHODS': [
        'get',
        'post',
        'put',
        'delete',
        'patch'
    ],
}

# Session settings
SESSION_ENGINE = 'django.contrib.sessions.backends.db'
SESSION_COOKIE_AGE = 86400  # 24 hours in seconds
SESSION_COOKIE_NAME = 'sessionid'
SESSION_COOKIE_SECURE = not DEBUG
CSRF_COOKIE_SECURE = not DEBUG
SESSION_COOKIE_HTTPONLY = True
CORS_ALLOW_CREDENTIALS = True

# CORS settings
if DEBUG:
    CORS_ALLOW_ALL_ORIGINS = True

else:
    CORS_ALLOWED_ORIGINS = os.getenv('CORS_ALLOWED_ORIGINS', '').split(',')

# CORS_ALLOWED_ORIGINS = [
#     'http://localhost:5173',
# ]
CSRF_TRUSTED_ORIGINS = ['http://localhost:5173']

CORS_ALLOW_CREDENTIALS = True

# Content Security Policy settings
CSP_DEFAULT_SRC = ("'self'",)
CSP_SCRIPT_SRC = ("'self'",)
CSP_CONNECT_SRC = ("'self'",)


# Password hashers
PASSWORD_HASHERS = [
    'django.contrib.auth.hashers.Argon2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2PasswordHasher',
    'django.contrib.auth.hashers.PBKDF2SHA1PasswordHasher',
]

AUTHENTICATION_BACKENDS = ['users.backends.EmailBackend']

# OpenRouter API Settings
OPENROUTER_API_URL = os.getenv('OPENROUTER_API_URL', 'https://openrouter.ai/api/v1/chat/completions')
OPENROUTER_API_KEY = os.getenv('OPENROUTER_API_KEY', '')

# Default model settings
OPENROUTER_DEFAULT_MODEL = "openai/gpt-4o-mini"
OPENROUTER_DEFAULT_PARAMS = {
    "temperature": 0.7,
    "max_tokens": 1500,
    "top_p": 0.95,
    "frequency_penalty": 0,
    "presence_penalty": 0
}

# Add OpenRouter errors to exception handlers in common.utils
EXCEPTION_HANDLERS = {
    # Django and DRF exceptions
    'ValidationError': (status.HTTP_400_BAD_REQUEST, logging.WARNING),
    'ObjectDoesNotExist': (status.HTTP_404_NOT_FOUND, logging.INFO),
    'PermissionDenied': (status.HTTP_403_FORBIDDEN, logging.WARNING),
    'NotAuthenticated': (status.HTTP_401_UNAUTHORIZED, logging.INFO),
    'AuthenticationFailed': (status.HTTP_401_UNAUTHORIZED, logging.WARNING),
    'NotFound': (status.HTTP_404_NOT_FOUND, logging.INFO),
    'MethodNotAllowed': (status.HTTP_405_METHOD_NOT_ALLOWED, logging.WARNING),
    'Throttled': (status.HTTP_429_TOO_MANY_REQUESTS, logging.WARNING),
    'ParseError': (status.HTTP_400_BAD_REQUEST, logging.WARNING),

    # Custom application exceptions
    'CustomDrugValidationError': (status.HTTP_400_BAD_REQUEST, logging.WARNING),
    'DrugInteractionValidationError': (status.HTTP_400_BAD_REQUEST, logging.WARNING),
    'TreatmentGuideValidationError': (status.HTTP_400_BAD_REQUEST, logging.WARNING),
    'TreatmentGuideProcessingError': (status.HTTP_500_INTERNAL_SERVER_ERROR, logging.ERROR),
    'RatingValidationError': (status.HTTP_400_BAD_REQUEST, logging.WARNING),
    'DosageCalculationError': (status.HTTP_422_UNPROCESSABLE_ENTITY, logging.WARNING),
    'UnitConversioError': (status.HTTP_422_UNPROCESSABLE_ENTITY, logging.WARNING),
    'OpenRouterValidationError': (status.HTTP_400_BAD_REQUEST, logging.WARNING),
    'OpenRouterProcessingError': (status.HTTP_502_BAD_GATEWAY, logging.ERROR),

    # Default handler for unhandled exceptions
    'Exception': (status.HTTP_500_INTERNAL_SERVER_ERROR, logging.ERROR)
}